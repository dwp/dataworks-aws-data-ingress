jobs:
- name: development
  max_in_flight: 1
  plan:
    - in_parallel:
      - get: meta
        resource: meta-development
      - get: dataworks-aws-data-ingress
        trigger: true
      - get: dataworks-behavioural-framework
        trigger: false
      - .: (( inject meta.plan.get-dw-al2-ecs-ami ))
    - .: (( inject meta.plan.terraform-bootstrap ))
    - .: (( inject meta.plan.terraform-apply ))
      params:
        TF_WORKSPACE: default
    - .: (( inject meta.plan.terraform-plan ))
      params::wq

        TF_WORKSPACE: default
    - .: (( inject meta.plan.e2e-test-sft))
      params:
        TF_WORKSPACE: development
        AWS_ACC: ((aws_account.development))
        AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci

- name: development-trend-micro-test
  max_in_flight: 1
  plan:
    - in_parallel:
        - get: meta
          resource: meta-development
        - get: dataworks-aws-data-ingress-userdata
          trigger: true
        - get: dataworks-behavioural-framework
          trigger: false
        - .: (( inject meta.plan.get-dw-al2-ecs-ami ))
    - .: (( inject meta.plan.terraform-bootstrap ))
    - .: (( inject meta.plan.terraform-apply-trend-micro ))
      params:
        TF_WORKSPACE: default
    - .: (( inject meta.plan.terraform-plan ))
      params:
        TF_WORKSPACE: default
    - .: (( inject meta.plan.e2e-test-trend-micro))
      params:
        TF_WORKSPACE: development
        AWS_ACC: ((aws_account.development))
        AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci

- name: cycle-data-ingress-development
  plan:
    - .: (( inject meta.plan.cycle-containers ))
      params:
        AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
        CLUSTER: data-ingress
        SERVICE: data-ingress
